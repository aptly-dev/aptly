.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "APTLY" "1" "October 2024" "" ""
.
.SH "NAME"
\fBaptly\fR \- Debian repository management tool
.
.SH "SYNOPSIS"
Common command format:
.
.P
\fBaptly\fR [\fIglobal options\fR\|\.\|\.\|\.] \fIcommand\fR \fIsubcommand\fR [\fIoptions\fR\|\.\|\.\|\.] \fIarguments\fR
.
.P
aptly has integrated help that matches contents of this manual page, to get help, prepend \fBhelp\fR to command name:
.
.P
\fBaptly\fR \fBhelp\fR \fBmirror\fR \fBcreate\fR
.
.SH "DESCRIPTION"
aptly is a tool to create partial and full mirrors of remote repositories, manage local repositories, filter them, merge, upgrade individual packages, take snapshots and publish them back as Debian repositories\.
.
.P
aptly\(cqs goal is to establish repeatability and controlled changes in a package\-centric environment\. aptly allows one to fix a set of packages in a repository, so that package installation and upgrade becomes deterministic\. At the same time aptly allows one to perform controlled, fine\-grained changes in repository contents to transition your package environment to new version\.
.
.SH "CONFIGURATION"
aptly looks for configuration file first in \fB~/\.aptly\.conf\fR then in \fB/usr/local/etc/aptly\.conf\fR and \fB/etc/aptly\.conf\fR\. If no config file found (or they are not readable), a new one is created in the home directory\. If \fB\-config=\fR flag is specified, aptly would use config file at specified location\. Also aptly needs root directory for database, package and published repository storage\. If not specified, directory defaults to \fB~/\.aptly/\fR, it will be created if missing\.
.
.P
Configuration file is stored in JSON format (default values shown below):
.
.IP "" 4
.
.nf

{
  "rootDir": "$HOME/\.aptly",
  "databaseBackend": {
    "type": "",
    "url": ""
  },
  "downloadConcurrency": 4,
  "downloadSpeedLimit": 0,
  "downloadRetries": 0,
  "downloader": "default",
  "databaseOpenAttempts": 10,
  "architectures": [],
  "dependencyFollowSuggests": false,
  "dependencyFollowRecommends": false,
  "dependencyFollowAllVariants": false,
  "dependencyFollowSource": false,
  "dependencyVerboseResolve": false,
  "gpgDisableSign": false,
  "gpgDisableVerify": false,
  "gpgProvider": "gpg",
  "downloadSourcePackages": false,
  "packagePoolStorage": {
    "path": "$ROOTDIR/pool",
    "azure": {
      "accountName": "",
      "accountKey": "",
      "container": "repo",
      "prefix": "",
      "endpoint": ""
    }
  },
  "skipLegacyPool": true,
  "ppaDistributorID": "ubuntu",
  "ppaCodename": "",
  "skipContentsPublishing": false,
  "FileSystemPublishEndpoints": {
    "test1": {
      "rootDir": "/opt/srv1/aptly_public",
      "linkMethod": "symlink"
    },
    "test2": {
      "rootDir": "/opt/srv2/aptly_public",
      "linkMethod": "copy",
      "verifyMethod": "md5"
    },
    "test3": {
      "rootDir": "/opt/srv3/aptly_public",
      "linkMethod": "hardlink"
    }
  },
  "S3PublishEndpoints": {
    "test": {
      "region": "us\-east\-1",
      "bucket": "repo",
      "endpoint": "",
      "awsAccessKeyID": "",
      "awsSecretAccessKey": "",
      "prefix": "",
      "acl": "public\-read",
      "storageClass": "",
      "encryptionMethod": "",
      "plusWorkaround": false,
      "disableMultiDel": false,
      "forceSigV2": false,
      "forceVirtualHostedStyle": true,
      "debug": false
    }
  },
  "SwiftPublishEndpoints": {
    "test": {
      "container": "repo",
      "osname": "",
      "password": "",
      "prefix": "",
      "authurl": "",
      "tenant": "",
      "tenantid": ""
    }
  },
  "AzurePublishEndpoints": {
    "test": {
      "accountName": "",
      "accountKey": "",
      "container": "repo",
      "prefix": "",
      "endpoint": "blob\.core\.windows\.net"
    }
  }
}
.
.fi
.
.IP "" 0
.
.P
Options:
.
.IP "\[ci]" 4
\fBrootDir\fR: is root of directory storage to store database (\fBrootDir\fR/db), the default for downloaded packages (\fBrootDir\fR/pool) and the default for published repositories (\fBrootDir\fR/public)
.
.IP "\[ci]" 4
\fBdatabaseBackend\fR: the database config; if this config is empty, use levledb backend by default
.
.IP "\[ci]" 4
\fBdownloadConcurrency\fR: is a number of parallel download threads to use when downloading packages
.
.IP "\[ci]" 4
\fBdownloadSpeedLimit\fR: limit in kbytes/sec on download speed while mirroring remote repositories
.
.IP "\[ci]" 4
\fBdownloadRetries\fR: number of retries for download attempts
.
.IP "\[ci]" 4
\fBdatabaseOpenAttempts\fR: number of attempts to open DB if it\(cqs locked by other instance; could be overridden with option \fB\-db\-open\-attempts\fR
.
.IP "\[ci]" 4
\fBarchitectures\fR: is a list of architectures to process; if left empty defaults to all available architectures; could be overridden with option \fB\-architectures\fR
.
.IP "\[ci]" 4
\fBdependencyFollowSuggests\fR: follow contents of \fBSuggests:\fR field when processing dependencies for the package
.
.IP "\[ci]" 4
\fBdependencyFollowRecommends\fR: follow contents of \fBRecommends:\fR field when processing dependencies for the package
.
.IP "\[ci]" 4
\fBdependencyFollowAllVariants\fR: when dependency looks like \fBpackage\-a | package\-b\fR, follow both variants always
.
.IP "\[ci]" 4
\fBdependencyFollowSource\fR: follow dependency from binary package to source package
.
.IP "\[ci]" 4
\fBdependencyVerboseResolve\fR: print additional details while resolving dependencies (useful for debugging)
.
.IP "\[ci]" 4
\fBgpgDisableSign\fR: don\(cqt sign published repositories with gpg(1), also can be disabled on per\-repo basis using \fB\-skip\-signing\fR flag when publishing
.
.IP "\[ci]" 4
\fBgpgDisableVerify\fR: don\(cqt verify remote mirrors with gpg(1), also can be disabled on per\-mirror basis using \fB\-ignore\-signatures\fR flag when creating and updating mirrors
.
.IP "\[ci]" 4
\fBgpgProvider\fR: implementation of PGP signing/validation \- \fBgpg\fR for external \fBgpg\fR utility or \fBinternal\fR to use Go internal implementation; \fBgpg1\fR might be used to force use of GnuPG 1\.x, \fBgpg2\fR enables GnuPG 2\.x only; default is to use GnuPG 1\.x if available and GnuPG 2\.x otherwise
.
.IP "\[ci]" 4
\fBdownloadSourcePackages\fR: if enabled, all mirrors created would have flag set to download source packages; this setting could be controlled on per\-mirror basis with \fB\-with\-sources\fR flag
.
.IP "\[ci]" 4
\fBpackagePoolStorage\fR: configures the location to store downloaded packages (defaults to the path \fB$ROOTDIR/pool\fR), by setting the value of the \fBtype\fR:
.
.IP "\[ci]" 4
\fBpath\fR: store the packages in the given path
.
.IP "\[ci]" 4
\fBazure\fR: store the packages in the given Azure Blob Storage container (see the section on Azure publishing below for information on the configuration)
.
.IP "" 0

.
.IP "\[ci]" 4
\fBskipLegacyPool\fR: in aptly up to version 1\.0\.0, package files were stored in internal package pool with MD5\-dervied path, since 1\.1\.0 package pool layout was changed; if option is enabled, aptly stops checking for legacy paths; by default option is enabled for new aptly installations and disabled when upgrading from older versions
.
.IP "\[ci]" 4
\fBppaDistributorID\fR, \fBppaCodename\fR: specifies paramaters for short PPA url expansion, if left blank they default to output of \fBlsb_release\fR command
.
.IP "\[ci]" 4
\fBFileSystemPublishEndpoints\fR: configuration of local filesystem publishing endpoints (see below)
.
.IP "\[ci]" 4
\fBS3PublishEndpoints\fR: configuration of Amazon S3 publishing endpoints (see below)
.
.IP "\[ci]" 4
\fBSwiftPublishEndpoints\fR: configuration of OpenStack Swift publishing endpoints (see below)
.
.IP "\[ci]" 4
\fBAzurePublishEndpoints\fR: configuration of Azure publishing endpoints (see below)
.
.IP "" 0
.
.SH "CUSTOM PACKAGE POOLS"
aptly defaults to storing downloaded packages at \fBrootDir/\fRpool\. In order to change this, you can set the \fBtype\fR key within \fBpackagePoolStorage\fR to one of two values:
.
.IP "\[ci]" 4
\fBlocal\fR: Store the package pool locally (the default)\. In order to change the path, additionally set the \fBpath\fR key within \fBpackagePoolStorage\fR to the desired location\.
.
.IP "\[ci]" 4
\fBazure\fR: Store the package pool in an Azure Blob Storage container\. Any keys in the below section on Azure publishing may be set on the \fBpackagePoolStorage\fR object in order to configure the Azure connection\.
.
.IP "" 0
.
.SH "FILESYSTEM PUBLISHING ENDPOINTS"
aptly defaults to publish to a single publish directory under \fBrootDir\fR/public\. For a more advanced publishing strategy, you can define one or more filesystem endpoints in the \fBFileSystemPublishEndpoints\fR list of the aptly configuration file\. Each endpoint has a name and the following associated settings:
.
.TP
\fBrootDir\fR
The publish directory, e\.g\., \fB/opt/srv/aptly_public\fR\.
.
.TP
\fBlinkMethod\fR
This is one of \fBhardlink\fR, \fBsymlink\fR or \fBcopy\fR\. It specifies how aptly links the files from the internal pool to the published directory\. If not specified, empty or wrong, this defaults to \fBhardlink\fR\.
.
.TP
\fBverifyMethod\fR
This is used only when setting the \fBlinkMethod\fR to \fBcopy\fR\. Possible values are \fBmd5\fR and \fBsize\fR\. It specifies how aptly compares existing links from the internal pool to the published directory\. The \fBsize\fR method compares only the file sizes, whereas the \fBmd5\fR method calculates the md5 checksum of the found file and compares it to the desired one\. If not specified, empty or wrong, this defaults to \fBmd5\fR\.
.
.P
In order to publish to such an endpoint, specify the endpoint as \fBfilesystem:endpoint\-name\fR with \fBendpoint\-name\fR as the name given in the aptly configuration file\. For example:
.
.P
\fBaptly publish snapshot wheezy\-main filesystem:test1:wheezy/daily\fR
.
.SH "S3 PUBLISHING ENDPOINTS"
aptly could be configured to publish repository directly to Amazon S3 (or S3\-compatible cloud storage)\. First, publishing endpoints should be described in aptly configuration file\. Each endpoint has name and associated settings:
.
.TP
\fBregion\fR
Amazon region for S3 bucket (e\.g\. \fBus\-east\-1\fR)
.
.TP
\fBbucket\fR
bucket name
.
.TP
\fBendpoint\fR
(optional) when using S3\-compatible cloud storage, specify hostname of service endpoint here, region is ignored if endpoint is set (set region to some human\-readable name) (should be left blank for real Amazon S3)
.
.TP
\fBprefix\fR
(optional) do publishing under specified prefix in the bucket, defaults to no prefix (bucket root)
.
.TP
\fBacl\fR
(optional) assign ACL to published files (one of the canned ACLs in Amazon terminology)\. Useful values: \fBprivate\fR (default), \fBpublic\-read\fR (public repository) or \fBnone\fR (don\(cqt set ACL)\. Public repositories could be consumed by \fBapt\fR using HTTP endpoint (Amazon bucket should be configured for "website hosting"), for private repositories special apt S3 transport is required\.
.
.TP
\fBawsAccessKeyID\fR, \fBawsSecretAccessKey\fR
(optional) Amazon credentials to access S3 bucket\. If not supplied, environment variables \fBAWS_ACCESS_KEY_ID\fR and \fBAWS_SECRET_ACCESS_KEY\fR are used\.
.
.TP
\fBstorageClass\fR
(optional) Amazon S3 storage class, defaults to \fBSTANDARD\fR\. Other values available: \fBREDUCED_REDUNDANCY\fR (lower price, lower redundancy)
.
.TP
\fBencryptionMethod\fR
(optional) server\-side encryption method, defaults to none\. Currently the only available encryption method is \fBAES256\fR
.
.TP
\fBplusWorkaround\fR
(optional) workaround misbehavior in apt and Amazon S3 for files with \fB+\fR in filename by creating two copies of package files with \fB+\fR in filename: one original and another one with spaces instead of plus signs With \fBplusWorkaround\fR enabled, package files with plus sign would be stored twice\. aptly might not cleanup files with spaces when published repository is dropped or updated (switched) to new version of repository (snapshot)
.
.TP
\fBdisableMultiDel\fR
(optional) for S3\-compatible cloud storages which do not support \fBMultiDel\fR S3 API, enable this setting (file deletion would be slower with this setting enabled)
.
.TP
\fBforceSigV2\fR
(optional) disable Signature V4 support, useful with non\-AWS S3\-compatible object stores which do not support SigV4, shouldn\(cqt be enabled for AWS
.
.TP
\fBforceVirtualHostedStyle\fR
(optional) disable path style visit, useful with non\-AWS S3\-compatible object stores which only support virtual hosted style
.
.TP
\fBdebug\fR
(optional) enables detailed request/response dump for each S3 operation
.
.P
In order to publish to S3, specify endpoint as \fBs3:endpoint\-name:\fR before publishing prefix on the command line, e\.g\.:
.
.P
\fBaptly publish snapshot wheezy\-main s3:test:\fR
.
.SH "OPENSTACK SWIFT PUBLISHING ENDPOINTS"
aptly could be configured to publish repository directly to OpenStack Swift\. First, publishing endpoints should be described in aptly configuration file\. Each endpoint has name and associated settings:
.
.TP
\fBcontainer\fR
container name
.
.TP
\fBprefix\fR
(optional) do publishing under specified prefix in the container, defaults to no prefix (container root)
.
.TP
\fBosname\fR, \fBpassword\fR
(optional) OpenStack credentials to access Keystone\. If not supplied, environment variables \fBOS_USERNAME\fR and \fBOS_PASSWORD\fR are used\.
.
.TP
\fBtenant\fR, \fBtenantid\fR
(optional) OpenStack tenant name and id (in order to use v2 authentication)\.
.
.TP
\fBauthurl\fR
(optional) the full url of Keystone server (including port, and version)\. example \fBhttp://identity\.example\.com:5000/v2\.0\fR
.
.P
In order to publish to Swift, specify endpoint as \fBswift:endpoint\-name:\fR before publishing prefix on the command line, e\.g\.:
.
.P
\fBaptly publish snapshot jessie\-main swift:test:\fR
.
.SH "AZURE PUBLISHING ENDPOINTS"
aptly can be configured to publish repositories directly to Microsoft Azure Blob Storage\. First, publishing endpoints should be described in the aptly configuration file\. Each endpoint has its name and associated settings:
.
.TP
\fBcontainer\fR
container name
.
.TP
\fBprefix\fR
(optional) do publishing under specified prefix in the container, defaults to no prefix (container root)
.
.TP
\fBaccountName\fR, \fBaccountKey\fR
Azure storage account access key to access blob storage
.
.TP
\fBendpoint\fR
endpoint URL to connect to, as described in the Azure documentation \fIhttps://docs\.microsoft\.com/en\-us/azure/storage/common/storage\-configure\-connection\-string\fR; defaults to \fBhttps://$accountName\.blob\.core\.windows\.net\fR
.
.SH "PACKAGE QUERY"
Some commands accept package queries to identify list of packages to process\. Package query syntax almost matches \fBreprepro\fR query language\. Query consists of the following simple terms:
.
.TP
direct package reference
reference to exaclty one package\. Format is identical to the way aptly lists packages in show commands with \fB\-with\-packages\fR flag: \fBname_version_arch\fR, e\.g\.: \fBlibmysqlclient18_5\.5\.35\-rel33\.0\-611\.squeeze_amd64\fR
.
.TP
dependency condition
syntax follows Debian dependency specification: package_name followed by optional version specification and architecture limit, e\.g: \fBmysql\-client (>= 3\.6)\fR\.
.
.TP
query against package fields
syntax is the same as for dependency conditions, but instead of package name field name is used, e\.g: \fBPriority (optional)\fR\.
.
.P
Supported fields:
.
.IP "\[ci]" 4
all field names from Debian package control files are supported except for \fBFilename\fR, \fBMD5sum\fR, \fBSHA1\fR, \fBSHA256\fR, \fBSize\fR, \fBFiles\fR, \fBChecksums\-SHA1\fR, \fBChecksums\-SHA256\fR\.
.
.IP "\[ci]" 4
\fB$Source\fR is a name of source package (for binary packages)
.
.IP "\[ci]" 4
\fB$SourceVersion\fR is a version of source package
.
.IP "\[ci]" 4
\fB$Architecture\fR is \fBArchitecture\fR for binary packages and \fBsource\fR for source packages, when matching with equal (\fB=\fR) operator, package with \fBany\fR architecture matches all architectures but \fBsource\fR\.
.
.IP "\[ci]" 4
\fB$Version\fR has the same value as \fBVersion\fR, but comparison operators use Debian version precedence rules
.
.IP "\[ci]" 4
\fB$PackageType\fR is \fBdeb\fR for binary packages and \fBsource\fR for source packages
.
.IP "" 0
.
.P
Operators:
.
.TP
\fB=\fR
strict match, default operator is no operator is given
.
.TP
\fB>=\fR, \fB<=\fR, \fB=\fR, \fB>>\fR (strictly greater), \fB<<\fR (strictly less)
lexicographical comparison for all fields and special rules when comparing package versions
.
.TP
\fB%\fR
pattern matching, like shell patterns, supported special symbols are: \fB[^]?*\fR, e\.g\.: \fB$Version (% 3\.5\-*)\fR
.
.TP
\fB~\fR
regular expression matching, e\.g\.: \fBName (~ \.*\-dev)\fR
.
.P
Simple terms could be combined into more complex queries using operators \fB,\fR (and), \fB|\fR (or) and \fB!\fR (not), parentheses \fB()\fR are used to change operator precedence\. Match value could be enclosed in single (\fB\(cq\fR) or double (\fB"\fR) quotes if required to resolve ambiguity, quotes inside quoted string should escaped with slash (\fB\e\fR)\.
.
.P
Examples:
.
.TP
\fBmysql\-client\fR
matches package mysql\-client of any version and architecture (including source), also matches packages that \fBProvide:\fR \fBmysql\-client\fR\.
.
.TP
\fBmysql\-client (>= 3\.6)\fR
matches package mysql\-client with version greater or equal to 3\.6\. Valid operators for version are: \fB>=\fR, \fB<=\fR, \fB=\fR, \fB>>\fR (strictly greater), \fB<<\fR (strictly less)\.
.
.TP
\fBmysql\-client {i386}\fR
matches package \fBmysql\-client\fR on architecture \fBi386\fR, architecture \fBall\fR matches all architectures but source\.
.
.TP
\fBmysql\-client (>= 3\.6) {i386}\fR
version and architecture conditions combined\.
.
.TP
\fBlibmysqlclient18_5\.5\.35\-rel33\.0\-611\.squeeze_amd64\fR
direct package reference\.
.
.TP
\fB$Source (nginx)\fR
all binary packages with \fBnginx\fR as source package\.
.
.TP
\fB!Name (~ \.*\-dev), mail\-transport, $Version (>= 3\.5)\fR
matches all packages that provide \fBmail\-transport\fR with name that has no suffix \fB\-dev\fR and with version greater or equal to \fB3\.5\fR\.
.
.P
When specified on command line, query may have to be quoted according to shell rules, so that it stays single argument:
.
.P
\fBaptly repo import percona stable \(cqmysql\-client (>= 3\.6)\(cq\fR
.
.SH "PACKAGE DISPLAY FORMAT"
Some aptly commands (\fBaptly mirror search\fR, \fBaptly package search\fR, \|\.\|\.\|\.) support \fB\-format\fR flag which allows to customize how search results are printed\. Golang templates are used to specify display format, with all package stanza fields available to template\. In addition to package stanza fields aptly provides:
.
.TP
\fBKey\fR
internal aptly package ID, unique for all packages in aptly (combination of \fBShortKey\fR and \fBFilesHash\fR)\.
.
.TP
\fBFilesHash\fR
hash that includes MD5 of all packages files\.
.
.TP
\fBShortKey\fR
package ID, which is unique in single list (mirror, repo, snapshot, \|\.\|\.\|\.), but not unique in whole aptly package collection\.
.
.P
For example, default aptly display format could be presented with the following template: \fB{{\.Package}}_{{\.Version}}_{{\.Architecture}}\fR\. To display package name with dependencies: \fB{{\.Package}} | {{\.Depends}}\fR\. More information on Golang template syntax: http://godoc\.org/text/template
.
.SH "GLOBAL OPTIONS"
.
.TP
\-\fBarchitectures\fR=
list of architectures to consider during (comma\-separated), default to all available
.
.TP
\-\fBconfig\fR=
location of configuration file (default locations in order: ~/\.aptly\.conf, /usr/local/etc/aptly\.conf, /etc/aptly\.conf)
.
.TP
\-\fBdb\-open\-attempts\fR=10
number of attempts to open DB if it\(cqs locked by other instance
.
.TP
\-\fBdep\-follow\-all\-variants\fR
when processing dependencies, follow a & b if dependency is \(cqa|b\(cq
.
.TP
\-\fBdep\-follow\-recommends\fR
when processing dependencies, follow Recommends
.
.TP
\-\fBdep\-follow\-source\fR
when processing dependencies, follow from binary to Source packages
.
.TP
\-\fBdep\-follow\-suggests\fR
when processing dependencies, follow Suggests
.
.TP
\-\fBdep\-verbose\-resolve\fR
when processing dependencies, print detailed logs
.
.TP
\-\fBgpg\-provider\fR=
PGP implementation ("gpg", "gpg1", "gpg2" for external gpg or "internal" for Go internal implementation)
.
.SH "CREATE NEW MIRROR"
\fBaptly\fR \fBmirror\fR \fBcreate\fR \fIname\fR \fIarchive url\fR \fIdistribution\fR [\fIcomponent1\fR \|\.\|\.\|\.]
.
.P
Creates mirror \fIname\fR of remote repository, aptly supports both regular and flat Debian repositories exported via HTTP and FTP\. aptly would try download Release file from remote repository and verify its\(cq signature\. Command line format resembles apt utlitily sources\.list(5)\.
.
.P
PPA urls could specified in short format:
.
.P
$ aptly mirror create \fIname\fR ppa:\fIuser\fR/\fIproject\fR
.
.P
Example:
.
.P
$ aptly mirror create wheezy\-main http://mirror\.yandex\.ru/debian/ wheezy main
.
.P
Options:
.
.TP
\-\fBfilter\fR=
filter packages in mirror
.
.TP
\-\fBfilter\-with\-deps\fR
when filtering, include dependencies of matching packages as well
.
.TP
\-\fBforce\-architectures\fR
(only with architecture list) skip check that requested architectures are listed in Release file
.
.TP
\-\fBforce\-components\fR
(only with component list) skip check that requested components are listed in Release file
.
.TP
\-\fBignore\-signatures\fR
disable verification of Release file signatures
.
.TP
\-\fBkeyring\fR=
gpg keyring to use when verifying Release file (could be specified multiple times)
.
.TP
\-\fBmax\-tries\fR=1
max download tries till process fails with download error
.
.TP
\-\fBwith\-installer\fR
download additional not packaged installer files
.
.TP
\-\fBwith\-sources\fR
download source packages in addition to binary packages
.
.TP
\-\fBwith\-udebs\fR
download \.udeb packages (Debian installer support)
.
.SH "LIST MIRRORS"
\fBaptly\fR \fBmirror\fR \fBlist\fR
.
.P
List shows full list of remote repository mirrors\.
.
.P
Example:
.
.P
$ aptly mirror list
.
.P
Options:
.
.TP
\-\fBjson\fR
display list in JSON format
.
.TP
\-\fBraw\fR
display list in machine\-readable format
.
.SH "SHOW DETAILS ABOUT MIRROR"
\fBaptly\fR \fBmirror\fR \fBshow\fR \fIname\fR
.
.P
Shows detailed information about the mirror\.
.
.P
Example:
.
.P
$ aptly mirror show wheezy\-main
.
.P
Options:
.
.TP
\-\fBjson\fR
display record in JSON format
.
.TP
\-\fBwith\-packages\fR
show detailed list of packages and versions stored in the mirror
.
.SH "DELETE MIRROR"
\fBaptly\fR \fBmirror\fR \fBdrop\fR \fIname\fR
.
.P
Drop deletes information about remote repository mirror \fIname\fR\. Package data is not deleted (since it could still be used by other mirrors or snapshots)\. If mirror is used as source to create a snapshot, aptly would refuse to delete such mirror, use flag \-force to override\.
.
.P
Example:
.
.P
$ aptly mirror drop wheezy\-main
.
.P
Options:
.
.TP
\-\fBforce\fR
force mirror deletion even if used by snapshots
.
.SH "UPDATE MIRROR"
\fBaptly\fR \fBmirror\fR \fBupdate\fR \fIname\fR
.
.P
Updates remote mirror (downloads package files and meta information)\. When mirror is created, this command should be run for the first time to fetch mirror contents\. This command can be run multiple times to get updated repository contents\. If interrupted, command can be safely restarted\.
.
.P
Example:
.
.P
$ aptly mirror update wheezy\-main
.
.P
Options:
.
.TP
\-\fBdownload\-limit\fR=0
limit download speed (kbytes/sec)
.
.TP
\-\fBdownloader\fR=default
downloader to use (e\.g\. grab)
.
.TP
\-\fBforce\fR
force update mirror even if it is locked by another process
.
.TP
\-\fBignore\-checksums\fR
ignore checksum mismatches while downloading package files and metadata
.
.TP
\-\fBignore\-signatures\fR
disable verification of Release file signatures
.
.TP
\-\fBkeyring\fR=
gpg keyring to use when verifying Release file (could be specified multiple times)
.
.TP
\-\fBmax\-tries\fR=1
max download tries till process fails with download error
.
.TP
\-\fBskip\-existing\-packages\fR
do not check file existence for packages listed in the internal database of the mirror
.
.SH "RENAMES MIRROR"
\fBaptly\fR \fBmirror\fR \fBrename\fR \fIold\-name\fR \fInew\-name\fR
.
.P
Command changes name of the mirror\.Mirror name should be unique\.
.
.P
Example:
.
.P
$ aptly mirror rename wheezy\-min wheezy\-main
.
.SH "EDIT MIRROR SETTINGS"
\fBaptly\fR \fBmirror\fR \fBedit\fR \fIname\fR
.
.P
Command edit allows one to change settings of mirror: filters, list of architectures\.
.
.P
Example:
.
.P
$ aptly mirror edit \-filter=nginx \-filter\-with\-deps some\-mirror
.
.P
Options:
.
.TP
\-\fBarchive\-url\fR=
archive url is the root of archive
.
.TP
\-\fBfilter\fR=
filter packages in mirror
.
.TP
\-\fBfilter\-with\-deps\fR
when filtering, include dependencies of matching packages as well
.
.TP
\-\fBignore\-signatures\fR
disable verification of Release file signatures
.
.TP
\-\fBkeyring\fR=
gpg keyring to use when verifying Release file (could be specified multiple times)
.
.TP
\-\fBwith\-installer\fR
download additional not packaged installer files
.
.TP
\-\fBwith\-sources\fR
download source packages in addition to binary packages
.
.TP
\-\fBwith\-udebs\fR
download \.udeb packages (Debian installer support)
.
.SH "SEARCH MIRROR FOR PACKAGES MATCHING QUERY"
\fBaptly\fR \fBmirror\fR \fBsearch\fR \fIname\fR [\fIpackage\-query\fR]
.
.P
Command search displays list of packages in mirror that match package query
.
.P
If query is not specified, all the packages are displayed\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly mirror search wheezy\-main \(cq$Architecture (i386), Name (% *\-dev)\(cq
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBformat\fR=
custom format for result printing
.
.TP
\-\fBwith\-deps\fR
include dependencies into search results
.
.SH "ADD PACKAGES TO LOCAL REPOSITORY"
\fBaptly\fR \fBrepo\fR \fBadd\fR \fIname\fR
.
.P
Command adds packages to local repository from \.deb, \.udeb (binary packages) and \.dsc (source packages) files\. When importing from directory aptly would do recursive scan looking for all files matching \fI\.[u]deb or\fR\.dsc patterns\. Every file discovered would be analyzed to extract metadata, package would then be created and added to the database\. Files would be imported to internal package pool\. For source packages, all required files are added automatically as well\. Extra files for source package should be in the same directory as *\.dsc file\.
.
.P
Example:
.
.P
$ aptly repo add testing myapp\-0\.1\.2\.deb incoming/
.
.P
Options:
.
.TP
\-\fBforce\-replace\fR
when adding package that conflicts with existing package, remove existing package
.
.TP
\-\fBremove\-files\fR
remove files that have been imported successfully into repository
.
.SH "COPY PACKAGES BETWEEN LOCAL REPOSITORIES"
\fBaptly\fR \fBrepo\fR \fBcopy\fR \fIsrc\-name\fR \fIdst\-name\fR \fIpackage\-query\fR \fB\|\.\|\.\|\.\fR
.
.P
Command copy copies packages matching \fIpackage\-query\fR from local repo \fIsrc\-name\fR to local repo \fIdst\-name\fR\.
.
.P
Example:
.
.P
$ aptly repo copy testing stable \(cqmyapp (=0\.1\.12)\(cq
.
.P
Options:
.
.TP
\-\fBdry\-run\fR
don\(cqt copy, just show what would be copied
.
.TP
\-\fBwith\-deps\fR
follow dependencies when processing package\-spec
.
.SH "CREATE LOCAL REPOSITORY"
\fBaptly\fR \fBrepo\fR \fBcreate\fR \fIname\fR [ \fBfrom\fR \fBsnapshot\fR \fIsnapshot\fR ]
.
.P
Create local package repository\. Repository would be empty when created, packages could be added from files, copied or moved from another local repository or imported from the mirror\.
.
.P
If local package repository is created from snapshot, repo initial contents are copied from snapsot contents\.
.
.P
Example:
.
.P
$ aptly repo create testing
.
.P
$ aptly repo create mysql35 from snapshot mysql\-35\-2017
.
.P
Options:
.
.TP
\-\fBcomment\fR=
any text that would be used to described local repository
.
.TP
\-\fBcomponent\fR=main
default component when publishing
.
.TP
\-\fBdistribution\fR=
default distribution when publishing
.
.TP
\-\fBuploaders\-file\fR=
uploaders\.json to be used when including \.changes into this repository
.
.SH "DELETE LOCAL REPOSITORY"
\fBaptly\fR \fBrepo\fR \fBdrop\fR \fIname\fR
.
.P
Drop information about deletions from local repo\. Package data is not deleted (since it could be still used by other mirrors or snapshots)\.
.
.P
Example:
.
.P
$ aptly repo drop local\-repo
.
.P
Options:
.
.TP
\-\fBforce\fR
force local repo deletion even if used by snapshots
.
.SH "EDIT PROPERTIES OF LOCAL REPOSITORY"
\fBaptly\fR \fBrepo\fR \fBedit\fR \fIname\fR
.
.P
Command edit allows one to change metadata of local repository: comment, default distribution and component\.
.
.P
Example:
.
.P
$ aptly repo edit \-distribution=wheezy testing
.
.P
Options:
.
.TP
\-\fBcomment\fR=
any text that would be used to described local repository
.
.TP
\-\fBcomponent\fR=
default component when publishing
.
.TP
\-\fBdistribution\fR=
default distribution when publishing
.
.TP
\-\fBuploaders\-file\fR=
uploaders\.json to be used when including \.changes into this repository
.
.SH "IMPORT PACKAGES FROM MIRROR TO LOCAL REPOSITORY"
\fBaptly\fR \fBrepo\fR \fBimport\fR \fIsrc\-mirror\fR \fIdst\-repo\fR \fIpackage\-query\fR \fB\|\.\|\.\|\.\fR
.
.P
Command import looks up packages matching \fIpackage\-query\fR in mirror \fIsrc\-mirror\fR and copies them to local repo \fIdst\-repo\fR\.
.
.P
Example:
.
.P
$ aptly repo import wheezy\-main testing nginx
.
.P
Options:
.
.TP
\-\fBdry\-run\fR
don\(cqt import, just show what would be imported
.
.TP
\-\fBwith\-deps\fR
follow dependencies when processing package\-spec
.
.SH "LIST LOCAL REPOSITORIES"
\fBaptly\fR \fBrepo\fR \fBlist\fR
.
.P
List command shows full list of local package repositories\.
.
.P
Example:
.
.P
$ aptly repo list
.
.P
Options:
.
.TP
\-\fBjson\fR
display list in JSON format
.
.TP
\-\fBraw\fR
display list in machine\-readable format
.
.SH "MOVE PACKAGES BETWEEN LOCAL REPOSITORIES"
\fBaptly\fR \fBrepo\fR \fBmove\fR \fIsrc\-name\fR \fIdst\-name\fR \fIpackage\-query\fR \fB\|\.\|\.\|\.\fR
.
.P
Command move moves packages matching \fIpackage\-query\fR from local repo \fIsrc\-name\fR to local repo \fIdst\-name\fR\.
.
.P
Example:
.
.P
$ aptly repo move testing stable \(cqmyapp (=0\.1\.12)\(cq
.
.P
Options:
.
.TP
\-\fBdry\-run\fR
don\(cqt move, just show what would be moved
.
.TP
\-\fBwith\-deps\fR
follow dependencies when processing package\-spec
.
.SH "REMOVE PACKAGES FROM LOCAL REPOSITORY"
\fBaptly\fR \fBrepo\fR \fBremove\fR \fIname\fR \fIpackage\-query\fR \fB\|\.\|\.\|\.\fR
.
.P
Commands removes packages matching \fIpackage\-query\fR from local repository \fIname\fR\. If removed packages are not referenced by other repos or snapshots, they can be removed completely (including files) by running \(cqaptly db cleanup\(cq\.
.
.P
Example:
.
.P
$ aptly repo remove testing \(cqmyapp (=0\.1\.12)\(cq
.
.P
Options:
.
.TP
\-\fBdry\-run\fR
don\(cqt remove, just show what would be removed
.
.SH "SHOW DETAILS ABOUT LOCAL REPOSITORY"
\fBaptly\fR \fBrepo\fR \fBshow\fR \fIname\fR
.
.P
Show command shows full information about local package repository\.
.
.P
ex: $ aptly repo show testing
.
.P
Options:
.
.TP
\-\fBjson\fR
display record in JSON format
.
.TP
\-\fBwith\-packages\fR
show list of packages
.
.SH "RENAMES LOCAL REPOSITORY"
\fBaptly\fR \fBrepo\fR \fBrename\fR \fIold\-name\fR \fInew\-name\fR
.
.P
Command changes name of the local repo\. Local repo name should be unique\.
.
.P
Example:
.
.P
$ aptly repo rename wheezy\-min wheezy\-main
.
.SH "SEARCH REPO FOR PACKAGES MATCHING QUERY"
\fBaptly\fR \fBrepo\fR \fBsearch\fR \fIname\fR [\fIpackage\-query\fR]
.
.P
Command search displays list of packages in local repository that match package query
.
.P
If query is not specified, all the packages are displayed\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly repo search my\-software \(cq$Architecture (i386), Name (% *\-dev)\(cq
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBformat\fR=
custom format for result printing
.
.TP
\-\fBwith\-deps\fR
include dependencies into search results
.
.SH "ADD PACKAGES TO LOCAL REPOSITORIES BASED ON \.CHANGES FILES"
\fBaptly\fR \fBrepo\fR \fBinclude\fR
.
.P
Command include looks for \.changes files in list of arguments or specified directories\. Each \.changes file is verified, parsed, referenced files are put into separate temporary directory and added into local repository\. Successfully imported files are removed by default\.
.
.P
Additionally uploads could be restricted with
.
.P
Example:
.
.P
$ aptly repo include \-repo=foo\-release incoming/
.
.P
Options:
.
.TP
\-\fBaccept\-unsigned\fR
accept unsigned \.changes files
.
.TP
\-\fBforce\-replace\fR
when adding package that conflicts with existing package, remove existing package
.
.TP
\-\fBignore\-signatures\fR
disable verification of \.changes file signature
.
.TP
\-\fBkeyring\fR=
gpg keyring to use when verifying Release file (could be specified multiple times)
.
.TP
\-\fBno\-remove\-files\fR
don\(cqt remove files that have been imported successfully into repository
.
.TP
\-\fBrepo\fR={{\.Distribution}}
which repo should files go to, defaults to Distribution field of \.changes file
.
.TP
\-\fBuploaders\-file\fR=
path to uploaders\.json file
.
.SH "CREATES SNAPSHOT OF MIRROR (LOCAL REPOSITORY) CONTENTS"
\fBaptly\fR \fBsnapshot\fR \fBcreate\fR \fIname\fR \fBfrom\fR \fBmirror\fR \fImirror\-name\fR \fB|\fR \fBfrom\fR \fBrepo\fR \fIrepo\-name\fR \fB|\fR \fBempty\fR
.
.P
Command create \fIname\fR from mirror makes persistent immutable snapshot of remote repository mirror\. Snapshot could be published or further modified using merge, pull and other aptly features\.
.
.P
Command create \fIname\fR from repo makes persistent immutable snapshot of local repository\. Snapshot could be processed as mirror snapshots, and mixed with snapshots of remote mirrors\.
.
.P
Command create \fIname\fR empty creates empty snapshot that could be used as a basis for snapshot pull operations, for example\. As snapshots are immutable, creating one empty snapshot should be enough\.
.
.P
Example:
.
.P
$ aptly snapshot create wheezy\-main\-today from mirror wheezy\-main
.
.SH "LIST SNAPSHOTS"
\fBaptly\fR \fBsnapshot\fR \fBlist\fR
.
.P
Command list shows full list of snapshots created\.
.
.P
Example:
.
.P
$ aptly snapshot list
.
.P
Options:
.
.TP
\-\fBjson\fR
display list in JSON format
.
.TP
\-\fBraw\fR
display list in machine\-readable format
.
.TP
\-\fBsort\fR=name
display list in \(cqname\(cq or creation \(cqtime\(cq order
.
.SH "SHOWS DETAILS ABOUT SNAPSHOT"
\fBaptly\fR \fBsnapshot\fR \fBshow\fR \fIname\fR
.
.P
Command show displays full information about a snapshot\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly snapshot show wheezy\-main
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBjson\fR
display record in JSON format
.
.TP
\-\fBwith\-packages\fR
show list of packages
.
.SH "VERIFY DEPENDENCIES IN SNAPSHOT"
\fBaptly\fR \fBsnapshot\fR \fBverify\fR \fIname\fR [\fIsource\fR \|\.\|\.\|\.]
.
.P
Verify does dependency resolution in snapshot \fIname\fR, possibly using additional snapshots \fIsource\fR as dependency sources\. All unsatisfied dependencies are printed\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly snapshot verify wheezy\-main wheezy\-contrib wheezy\-non\-free
.
.fi
.
.IP "" 0
.
.SH "PULL PACKAGES FROM ANOTHER SNAPSHOT"
\fBaptly\fR \fBsnapshot\fR \fBpull\fR \fIname\fR \fIsource\fR \fIdestination\fR \fIpackage\-query\fR \fB\|\.\|\.\|\.\fR
.
.P
Command pull pulls new packages along with its\(cq dependencies to snapshot \fIname\fR from snapshot \fIsource\fR\. Pull can upgrade package version in \fIname\fR with versions from \fIsource\fR following dependencies\. New snapshot \fIdestination\fR is created as a result of this process\. Packages could be specified simply as \(cqpackage\-name\(cq or as package queries\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly snapshot pull wheezy\-main wheezy\-backports wheezy\-new\-xorg xorg\-server\-server
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBall\-matches\fR
pull all the packages that satisfy the dependency version requirements
.
.TP
\-\fBdry\-run\fR
don\(cqt create destination snapshot, just show what would be pulled
.
.TP
\-\fBno\-deps\fR
don\(cqt process dependencies, just pull listed packages
.
.TP
\-\fBno\-remove\fR
don\(cqt remove other package versions when pulling package
.
.SH "DIFFERENCE BETWEEN TWO SNAPSHOTS"
\fBaptly\fR \fBsnapshot\fR \fBdiff\fR \fIname\-a\fR \fIname\-b\fR
.
.P
Displays difference in packages between two snapshots\. Snapshot is a list of packages, so difference between snapshots is a difference between package lists\. Package could be either completely missing in one snapshot, or package is present in both snapshots with different versions\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly snapshot diff \-only\-matching wheezy\-main wheezy\-backports
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBonly\-matching\fR
display diff only for matching packages (don\(cqt display missing packages)
.
.SH "MERGES SNAPSHOTS"
\fBaptly\fR \fBsnapshot\fR \fBmerge\fR \fIdestination\fR \fIsource\fR [\fIsource\fR\|\.\|\.\|\.]
.
.P
Merge command merges several \fIsource\fR snapshots into one \fIdestination\fR snapshot\. Merge happens from left to right\. By default, packages with the same name\-architecture pair are replaced during merge (package from latest snapshot on the list wins)\. If run with only one source snapshot, merge copies \fIsource\fR into \fIdestination\fR\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly snapshot merge wheezy\-w\-backports wheezy\-main wheezy\-backports
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBlatest\fR
use only the latest version of each package
.
.TP
\-\fBno\-remove\fR
don\(cqt remove duplicate arch/name packages
.
.SH "DELETE SNAPSHOT"
\fBaptly\fR \fBsnapshot\fR \fBdrop\fR \fIname\fR
.
.P
Drop removes information about a snapshot\. If snapshot is published, it can\(cqt be dropped\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly snapshot drop wheezy\-main
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBforce\fR
remove snapshot even if it was used as source for other snapshots
.
.SH "RENAMES SNAPSHOT"
\fBaptly\fR \fBsnapshot\fR \fBrename\fR \fIold\-name\fR \fInew\-name\fR
.
.P
Command changes name of the snapshot\. Snapshot name should be unique\.
.
.P
Example:
.
.P
$ aptly snapshot rename wheezy\-min wheezy\-main
.
.SH "SEARCH SNAPSHOT FOR PACKAGES MATCHING QUERY"
\fBaptly\fR \fBsnapshot\fR \fBsearch\fR \fIname\fR [\fIpackage\-query\fR]
.
.P
Command search displays list of packages in snapshot that match package query
.
.P
If query is not specified, all the packages are displayed\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly snapshot search wheezy\-main \(cq$Architecture (i386), Name (% *\-dev)\(cq
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBformat\fR=
custom format for result printing
.
.TP
\-\fBwith\-deps\fR
include dependencies into search results
.
.SH "FILTER PACKAGES IN SNAPSHOT PRODUCING ANOTHER SNAPSHOT"
\fBaptly\fR \fBsnapshot\fR \fBfilter\fR \fIsource\fR \fIdestination\fR \fIpackage\-query\fR \fB\|\.\|\.\|\.\fR
.
.P
Command filter does filtering in snapshot \fIsource\fR, producing another snapshot \fIdestination\fR\. Packages could be specified simply as \(cqpackage\-name\(cq or as package queries\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly snapshot filter wheezy\-main wheezy\-required \(cqPriority (required)\(cq
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBwith\-deps\fR
include dependent packages as well
.
.SH "REMOVE PUBLISHED REPOSITORY"
\fBaptly\fR \fBpublish\fR \fBdrop\fR \fIdistribution\fR [[\fIendpoint\fR:]\fIprefix\fR]
.
.P
Command removes whatever has been published under specified \fIprefix\fR, publishing \fIendpoint\fR and \fIdistribution\fR name\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly publish drop wheezy
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBforce\-drop\fR
remove published repository even if some files could not be cleaned up
.
.TP
\-\fBskip\-cleanup\fR
don\(cqt remove unreferenced files in prefix/component
.
.SH "LIST OF PUBLISHED REPOSITORIES"
\fBaptly\fR \fBpublish\fR \fBlist\fR
.
.P
Display list of currently published snapshots\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly publish list
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBjson\fR
display list in JSON format
.
.TP
\-\fBraw\fR
display list in machine\-readable format
.
.SH "PUBLISH LOCAL REPOSITORY"
\fBaptly\fR \fBpublish\fR \fBrepo\fR \fIname\fR [[\fIendpoint\fR:]\fIprefix\fR]
.
.P
Command publishes current state of local repository ready to be consumed by apt tools\. Published repostiories appear under rootDir/public directory\. Valid GPG key is required for publishing\.
.
.P
Multiple component repository could be published by specifying several components split by commas via \-component flag and multiple local repositories as the arguments:
.
.IP "" 4
.
.nf

aptly publish repo \-component=main,contrib repo\-main repo\-contrib
.
.fi
.
.IP "" 0
.
.P
It is not recommended to publish local repositories directly unless the repository is for testing purposes and changes happen frequently\. For production usage please take snapshot of repository and publish it using publish snapshot command\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly publish repo testing
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBacquire\-by\-hash\fR
provide index files by hash
.
.TP
\-\fBbatch\fR
run GPG with detached tty
.
.TP
\-\fBbutautomaticupgrades\fR=
set value for ButAutomaticUpgrades field
.
.TP
\-\fBcodename\fR=
codename to publish (defaults to distribution)
.
.TP
\-\fBcomponent\fR=
component name to publish (for multi\-component publishing, separate components with commas)
.
.TP
\-\fBdistribution\fR=
distribution name to publish
.
.TP
\-\fBforce\-overwrite\fR
overwrite files in package pool in case of mismatch
.
.TP
\-\fBgpg\-key\fR=
GPG key ID to use when signing the release
.
.TP
\-\fBkeyring\fR=
GPG keyring to use (instead of default)
.
.TP
\-\fBlabel\fR=
label to publish
.
.TP
\-\fBmulti\-dist\fR
enable multiple packages with the same filename in different distributions
.
.TP
\-\fBnotautomatic\fR=
set value for NotAutomatic field
.
.TP
\-\fBorigin\fR=
origin name to publish
.
.TP
\-\fBpassphrase\fR=
GPG passphrase for the key (warning: could be insecure)
.
.TP
\-\fBpassphrase\-file\fR=
GPG passphrase\-file for the key (warning: could be insecure)
.
.TP
\-\fBsecret\-keyring\fR=
GPG secret keyring to use (instead of default)
.
.TP
\-\fBskip\-bz2\fR
don\(cqt generate bzipped indexes
.
.TP
\-\fBskip\-contents\fR
don\(cqt generate Contents indexes
.
.TP
\-\fBskip\-signing\fR
don\(cqt sign Release files with GPG
.
.TP
\-\fBsuite\fR=
suite to publish (defaults to distribution)
.
.SH "SHOWS DETAILS OF PUBLISHED REPOSITORY"
\fBaptly\fR \fBpublish\fR \fBshow\fR \fIdistribution\fR [[\fIendpoint\fR:]\fIprefix\fR]
.
.P
Command show displays full information of a published repository\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly publish show wheezy
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBjson\fR
display record in JSON format
.
.SH "PUBLISH SNAPSHOT"
\fBaptly\fR \fBpublish\fR \fBsnapshot\fR \fIname\fR [[\fIendpoint\fR:]\fIprefix\fR]
.
.P
Command publishes snapshot as Debian repository ready to be consumed by apt tools\. Published repostiories appear under rootDir/public directory\. Valid GPG key is required for publishing\.
.
.P
Multiple component repository could be published by specifying several components split by commas via \-component flag and multiple snapshots as the arguments:
.
.IP "" 4
.
.nf

aptly publish snapshot \-component=main,contrib snap\-main snap\-contrib
.
.fi
.
.IP "" 0
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly publish snapshot wheezy\-main
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBacquire\-by\-hash\fR
provide index files by hash
.
.TP
\-\fBbatch\fR
run GPG with detached tty
.
.TP
\-\fBbutautomaticupgrades\fR=
overwrite value for ButAutomaticUpgrades field
.
.TP
\-\fBcodename\fR=
codename to publish (defaults to distribution)
.
.TP
\-\fBcomponent\fR=
component name to publish (for multi\-component publishing, separate components with commas)
.
.TP
\-\fBdistribution\fR=
distribution name to publish
.
.TP
\-\fBforce\-overwrite\fR
overwrite files in package pool in case of mismatch
.
.TP
\-\fBgpg\-key\fR=
GPG key ID to use when signing the release
.
.TP
\-\fBkeyring\fR=
GPG keyring to use (instead of default)
.
.TP
\-\fBlabel\fR=
label to publish
.
.TP
\-\fBmulti\-dist\fR
enable multiple packages with the same filename in different distributions
.
.TP
\-\fBnotautomatic\fR=
overwrite value for NotAutomatic field
.
.TP
\-\fBorigin\fR=
overwrite origin name to publish
.
.TP
\-\fBpassphrase\fR=
GPG passphrase for the key (warning: could be insecure)
.
.TP
\-\fBpassphrase\-file\fR=
GPG passphrase\-file for the key (warning: could be insecure)
.
.TP
\-\fBsecret\-keyring\fR=
GPG secret keyring to use (instead of default)
.
.TP
\-\fBskip\-bz2\fR
don\(cqt generate bzipped indexes
.
.TP
\-\fBskip\-contents\fR
don\(cqt generate Contents indexes
.
.TP
\-\fBskip\-signing\fR
don\(cqt sign Release files with GPG
.
.TP
\-\fBsuite\fR=
suite to publish (defaults to distribution)
.
.SH "ADD SOURCE TO STAGED SOURCE LIST OF PUBLISHED REPOSITORY"
\fBaptly\fR \fBpublish\fR \fBsource\fR \fBadd\fR \fIdistribution\fR \fIsource\fR
.
.P
The command adds sources to the staged source list of the published repository\.
.
.P
The flag \-component is mandatory\. Use a comma\-separated list of components, if multiple components should be modified\. The number of given components must be equal to the number of given sources, e\.g\.:
.
.IP "" 4
.
.nf

aptly publish add \-component=main,contrib wheezy wheezy\-main wheezy\-contrib
.
.fi
.
.IP "" 0
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly publish add \-component=contrib wheezy ppa wheezy\-contrib
.
.fi
.
.IP "" 0
.
.P
This command assigns the snapshot wheezy\-contrib to the component contrib and adds it to published repository revision of ppa/wheezy\.
.
.P
Options:
.
.TP
\-\fBcomponent\fR=
component names to add (for multi\-component publishing, separate components with commas)
.
.TP
\-\fBprefix\fR=\.
publishing prefix in the form of [\fIendpoint\fR:]\fIprefix\fR
.
.SH "DROPS STAGED SOURCE CHANGES OF PUBLISHED REPOSITORY"
\fBaptly\fR \fBpublish\fR \fBsource\fR \fBdrop\fR \fIdistribution\fR
.
.P
Command drops the staged source changes of the published repository\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly publish source drop wheezy
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBcomponent\fR=
component names to add (for multi\-component publishing, separate components with commas)
.
.TP
\-\fBprefix\fR=\.
publishing prefix in the form of [\fIendpoint\fR:]\fIprefix\fR
.
.SH "LISTS REVISION OF PUBLISHED REPOSITORY"
\fBaptly\fR \fBpublish\fR \fBsource\fR \fBlist\fR \fIdistribution\fR
.
.P
Command lists sources of a published repository\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly publish source list wheezy
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBcomponent\fR=
component names to add (for multi\-component publishing, separate components with commas)
.
.TP
\-\fBjson\fR
display record in JSON format
.
.TP
\-\fBprefix\fR=\.
publishing prefix in the form of [\fIendpoint\fR:]\fIprefix\fR
.
.SH "REMOVE SOURCE FROM STAGED SOURCE LIST OF PUBLISHED REPOSITORY"
\fBaptly\fR \fBpublish\fR \fBsource\fR \fBremove\fR \fIdistribution\fR [[\fIendpoint\fR:]\fIprefix\fR] \fIsource\fR
.
.P
The command removes sources from the staged source list of the published repository\.
.
.P
The flag \-component is mandatory\. Use a comma\-separated list of components, if multiple components should be removed, e\.g\.:
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly publish remove \-component=contrib,non\-free wheezy filesystem:symlink:debian
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBcomponent\fR=
component names to remove (for multi\-component publishing, separate components with commas)
.
.TP
\-\fBprefix\fR=\.
publishing prefix in the form of [\fIendpoint\fR:]\fIprefix\fR
.
.SH "UPDATE SOURCE IN STAGED SOURCE LIST OF PUBLISHED REPOSITORY"
\fBaptly\fR \fBpublish\fR \fBsource\fR \fBupdate\fR \fIdistribution\fR \fIsource\fR
.
.P
The command updates sources in the staged source list of the published repository\.
.
.P
The flag \-component is mandatory\. Use a comma\-separated list of components, if multiple components should be modified\. The number of given components must be equal to the number of given sources, e\.g\.:
.
.IP "" 4
.
.nf

aptly publish update \-component=main,contrib wheezy wheezy\-main wheezy\-contrib
.
.fi
.
.IP "" 0
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly publish update \-component=contrib wheezy ppa wheezy\-contrib
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBcomponent\fR=
component names to add (for multi\-component publishing, separate components with commas)
.
.TP
\-\fBprefix\fR=\.
publishing prefix in the form of [\fIendpoint\fR:]\fIprefix\fR
.
.SH "UPDATE PUBLISHED REPOSITORY BY SWITCHING TO NEW SOURCE"
\fBaptly\fR \fBpublish\fR \fBswitch\fR \fIdistribution\fR [[\fIendpoint\fR:]\fIprefix\fR] \fInew\-source\fR
.
.P
Command switches in\-place published snapshots with new source contents\. All publishing parameters are preserved (architecture list, distribution, component)\.
.
.P
For multiple component repositories, flag \-component should be given with list of components to update\. Corresponding sources should be given in the same order, e\.g\.:
.
.IP "" 4
.
.nf

aptly publish switch \-component=main,contrib wheezy wh\-main wh\-contrib
.
.fi
.
.IP "" 0
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly publish switch wheezy ppa wheezy\-7\.5
.
.fi
.
.IP "" 0
.
.P
This command would switch published repository (with one component) named ppa/wheezy (prefix ppa, dsitribution wheezy to new snapshot wheezy\-7\.5)\.
.
.P
Options:
.
.TP
\-\fBbatch\fR
run GPG with detached tty
.
.TP
\-\fBcomponent\fR=
component names to update (for multi\-component publishing, separate components with commas)
.
.TP
\-\fBforce\-overwrite\fR
overwrite files in package pool in case of mismatch
.
.TP
\-\fBgpg\-key\fR=
GPG key ID to use when signing the release
.
.TP
\-\fBkeyring\fR=
GPG keyring to use (instead of default)
.
.TP
\-\fBmulti\-dist\fR
enable multiple packages with the same filename in different distributions
.
.TP
\-\fBpassphrase\fR=
GPG passphrase for the key (warning: could be insecure)
.
.TP
\-\fBpassphrase\-file\fR=
GPG passphrase\-file for the key (warning: could be insecure)
.
.TP
\-\fBsecret\-keyring\fR=
GPG secret keyring to use (instead of default)
.
.TP
\-\fBskip\-bz2\fR
don\(cqt generate bzipped indexes
.
.TP
\-\fBskip\-cleanup\fR
don\(cqt remove unreferenced files in prefix/component
.
.TP
\-\fBskip\-contents\fR
don\(cqt generate Contents indexes
.
.TP
\-\fBskip\-signing\fR
don\(cqt sign Release files with GPG
.
.SH "UPDATE PUBLISHED LOCAL REPOSITORY"
\fBaptly\fR \fBpublish\fR \fBupdate\fR \fIdistribution\fR [[\fIendpoint\fR:]\fIprefix\fR]
.
.P
Command re\-publishes (updates) published local repository\. \fIdistribution\fR and \fIprefix\fR should be occupied with local repository published using command aptly publish repo\. Update happens in\-place with minimum possible downtime for published repository\.
.
.P
For multiple component published repositories, all local repositories are updated\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly publish update wheezy ppa
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBbatch\fR
run GPG with detached tty
.
.TP
\-\fBforce\-overwrite\fR
overwrite files in package pool in case of mismatch
.
.TP
\-\fBgpg\-key\fR=
GPG key ID to use when signing the release
.
.TP
\-\fBkeyring\fR=
GPG keyring to use (instead of default)
.
.TP
\-\fBmulti\-dist\fR
enable multiple packages with the same filename in different distributions
.
.TP
\-\fBpassphrase\fR=
GPG passphrase for the key (warning: could be insecure)
.
.TP
\-\fBpassphrase\-file\fR=
GPG passphrase\-file for the key (warning: could be insecure)
.
.TP
\-\fBsecret\-keyring\fR=
GPG secret keyring to use (instead of default)
.
.TP
\-\fBskip\-bz2\fR
don\(cqt generate bzipped indexes
.
.TP
\-\fBskip\-cleanup\fR
don\(cqt remove unreferenced files in prefix/component
.
.TP
\-\fBskip\-contents\fR
don\(cqt generate Contents indexes
.
.TP
\-\fBskip\-signing\fR
don\(cqt sign Release files with GPG
.
.SH "SEARCH FOR PACKAGES MATCHING QUERY"
\fBaptly\fR \fBpackage\fR \fBsearch\fR [\fIpackage\-query\fR]
.
.P
Command search displays list of packages in whole DB that match package query\.
.
.P
If query is not specified, all the packages are displayed\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly package search \(cq$Architecture (i386), Name (% *\-dev)\(cq
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBformat\fR=
custom format for result printing
.
.SH "SHOW DETAILS ABOUT PACKAGES MATCHING QUERY"
\fBaptly\fR \fBpackage\fR \fBshow\fR \fIpackage\-query\fR
.
.P
Command shows displays detailed meta\-information about packages matching query\. Information from Debian control file is displayed\. Optionally information about package files and inclusion into mirrors/snapshots/local repos is shown\.
.
.P
Example:
.
.IP "" 4
.
.nf

$ aptly package show \(cqnginx\-light_1\.2\.1\-2\.2+wheezy2_i386\(cq
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBwith\-files\fR
display information about files from package pool
.
.TP
\-\fBwith\-references\fR
display information about mirrors, snapshots and local repos referencing this package
.
.SH "CLEANUP DB AND PACKAGE POOL"
\fBaptly\fR \fBdb\fR \fBcleanup\fR
.
.P
Database cleanup removes information about unreferenced packages and removes files in the package pool that aren\(cqt used by packages anymore
.
.P
Example:
.
.P
$ aptly db cleanup
.
.P
Options:
.
.TP
\-\fBdry\-run\fR
don\(cqt delete anything
.
.TP
\-\fBverbose\fR
be verbose when loading objects/removing them
.
.SH "RECOVER DB AFTER CRASH"
\fBaptly\fR \fBdb\fR \fBrecover\fR
.
.P
Database recover does its\(cq best to recover the database after a crash\. It is recommended to backup the DB before running recover\.
.
.P
Example:
.
.P
$ aptly db recover
.
.SH "HTTP SERVE PUBLISHED REPOSITORIES"
\fBaptly\fR \fBserve\fR
.
.P
Command serve starts embedded HTTP server (not suitable for real production usage) to serve contents of public/ subdirectory of aptly\(cqs root that contains published repositories\.
.
.P
Example:
.
.P
$ aptly serve \-listen=:8080
.
.P
Options:
.
.TP
\-\fBlisten\fR=:8080
host:port for HTTP listening
.
.SH "START API HTTP SERVICE"
\fBaptly\fR \fBapi\fR \fBserve\fR
.
.P
Start HTTP server with aptly REST API\. The server can listen to either a port or Unix domain socket\. When using a socket, Aptly will fully manage the socket file\. This command also supports taking over from a systemd file descriptors to enable systemd socket activation\.
.
.P
Example:
.
.P
$ aptly api serve \-listen=:8080 $ aptly api serve \-listen=unix:///tmp/aptly\.sock
.
.P
Options:
.
.TP
\-\fBlisten\fR=:8080
host:port for HTTP listening or unix://path to listen on a Unix domain socket
.
.TP
\-\fBno\-lock\fR
don\(cqt lock the database
.
.SH "RENDER GRAPH OF RELATIONSHIPS"
\fBaptly\fR \fBgraph\fR
.
.P
Command graph displays relationship between mirrors, local repositories, snapshots and published repositories using graphviz package to render graph as an image\.
.
.P
Example:
.
.P
$ aptly graph
.
.P
Options:
.
.TP
\-\fBformat\fR=png
render graph to specified format (png, svg, pdf, etc\.)
.
.TP
\-\fBlayout\fR=horizontal
create a more \(cqvertical\(cq or a more \(cqhorizontal\(cq graph layout
.
.TP
\-\fBoutput\fR=
specify output filename, default is to open result in viewer
.
.SH "SHOW CURRENT APTLY\(cqS CONFIG"
\fBaptly\fR \fBconfig\fR \fBshow\fR
.
.P
Command show displays the current aptly configuration\.
.
.P
Example:
.
.P
$ aptly config show
.
.SH "RUN APTLY TASKS"
\fBaptly\fR \fBtask\fR \fBrun\fR \-filename=\fIfilename\fR \fB|\fR \fIcommand1\fR, \fIcommand2\fR, \fB\|\.\|\.\|\.\fR
.
.P
Command helps organise multiple aptly commands in one single aptly task, running as single thread\.
.
.P
Example:
.
.IP "" 4
.
.nf

  $ aptly task run
  > repo create local
  > repo add local pkg1
  > publish repo local
  > serve
  >
.
.fi
.
.IP "" 0
.
.P
Options:
.
.TP
\-\fBfilename\fR=
specifies the filename that contains the commands to run
.
.SH "SHOW CURRENT APTLY\(cqS CONFIG"
\fBaptly\fR \fBconfig\fR \fBshow\fR
.
.P
Command show displays the current aptly configuration\.
.
.P
Example:
.
.P
$ aptly config show
.
.SH "ENVIRONMENT"
If environment variable \fBHTTP_PROXY\fR is set \fBaptly\fR would use its value to proxy all HTTP requests\.
.
.SH "RETURN VALUES"
\fBaptly\fR exists with:
.
.TP
0
success
.
.TP
1
general failure
.
.TP
2
command parse failure
.
.SH "AUTHORS"
List of contributors, in chronological order:
.
.IP "\[ci]" 4
Andrey Smirnov (https://github\.com/smira)
.
.IP "\[ci]" 4
Sebastien Binet (https://github\.com/sbinet)
.
.IP "\[ci]" 4
Ryan Uber (https://github\.com/ryanuber)
.
.IP "\[ci]" 4
Simon Aquino (https://github\.com/queeno)
.
.IP "\[ci]" 4
Vincent Batoufflet (https://github\.com/vbatoufflet)
.
.IP "\[ci]" 4
Ivan Kurnosov (https://github\.com/zerkms)
.
.IP "\[ci]" 4
Dmitrii Kashin (https://github\.com/freehck)
.
.IP "\[ci]" 4
Chris Read (https://github\.com/cread)
.
.IP "\[ci]" 4
Rohan Garg (https://github\.com/shadeslayer)
.
.IP "\[ci]" 4
Russ Allbery (https://github\.com/rra)
.
.IP "\[ci]" 4
Sylvain Baubeau (https://github\.com/lebauce)
.
.IP "\[ci]" 4
Andrea Bernardo Ciddio (https://github\.com/bcandrea)
.
.IP "\[ci]" 4
Michael Koval (https://github\.com/mkoval)
.
.IP "\[ci]" 4
Alexander Guy (https://github\.com/alexanderguy)
.
.IP "\[ci]" 4
Sebastien Badia (https://github\.com/sbadia)
.
.IP "\[ci]" 4
Szymon Sobik (https://github\.com/sobczyk)
.
.IP "\[ci]" 4
Paul Krohn (https://github\.com/paul\-krohn)
.
.IP "\[ci]" 4
Vincent Bernat (https://github\.com/vincentbernat)
.
.IP "\[ci]" 4
x539 (https://github\.com/x539)
.
.IP "\[ci]" 4
Phil Frost (https://github\.com/bitglue)
.
.IP "\[ci]" 4
Benoit Foucher (https://github\.com/bentoi)
.
.IP "\[ci]" 4
Geoffrey Thomas (https://github\.com/geofft)
.
.IP "\[ci]" 4
Oliver Sauder (https://github\.com/sliverc)
.
.IP "\[ci]" 4
Harald Sitter (https://github\.com/apachelogger)
.
.IP "\[ci]" 4
Johannes Layher (https://github\.com/jola5)
.
.IP "\[ci]" 4
Charles Hsu (https://github\.com/charz)
.
.IP "\[ci]" 4
Clemens Rabe (https://github\.com/seeraven)
.
.IP "\[ci]" 4
TJ Merritt (https://github\.com/tjmerritt)
.
.IP "\[ci]" 4
Matt Martyn (https://github\.com/MMartyn)
.
.IP "\[ci]" 4
Ludovico Cavedon (https://github\.com/cavedon)
.
.IP "\[ci]" 4
Petr Jediny (https://github\.com/pjediny)
.
.IP "\[ci]" 4
Maximilian Stein (https://github\.com/steinymity)
.
.IP "\[ci]" 4
Strajan Sebastian (https://github\.com/strajansebastian)
.
.IP "\[ci]" 4
Artem Smirnov (https://github\.com/urpylka)
.
.IP "\[ci]" 4
William Manley (https://github\.com/wmanley)
.
.IP "\[ci]" 4
Shengjing Zhu (https://github\.com/zhsj)
.
.IP "\[ci]" 4
Nabil Bendafi (https://github\.com/nabilbendafi)
.
.IP "\[ci]" 4
Raphael Medaer (https://github\.com/rmedaer)
.
.IP "\[ci]" 4
Raul Benencia (https://github\.com/rul)
.
.IP "\[ci]" 4
Don Kuntz (https://github\.com/dkuntz2)
.
.IP "\[ci]" 4
Joshua Colson (https://github\.com/freakinhippie)
.
.IP "\[ci]" 4
Andre Roth (https://github\.com/neolynx)
.
.IP "\[ci]" 4
Lorenzo Bolla (https://github\.com/lbolla)
.
.IP "\[ci]" 4
Benj Fassbind (https://github\.com/randombenj)
.
.IP "\[ci]" 4
Markus Muellner (https://github\.com/mmianl)
.
.IP "\[ci]" 4
Chuan Liu (https://github\.com/chuan)
.
.IP "\[ci]" 4
Samuel Mutel (https://github\.com/smutel)
.
.IP "\[ci]" 4
Russell Greene (https://github\.com/russelltg)
.
.IP "\[ci]" 4
Wade Simmons (https://github\.com/wadey)
.
.IP "\[ci]" 4
Steven Stone (https://github\.com/smstone)
.
.IP "\[ci]" 4
Josh Bayfield (https://github\.com/jbayfield)
.
.IP "\[ci]" 4
Boxjan (https://github\.com/boxjan)
.
.IP "\[ci]" 4
Mauro Regli (https://github\.com/reglim)
.
.IP "\[ci]" 4
Alexander Zubarev (https://github\.com/strike)
.
.IP "\[ci]" 4
Nicolas Dostert (https://github\.com/acdn\-ndostert)
.
.IP "\[ci]" 4
Ryan Gonzalez (https://github\.com/refi64)
.
.IP "\[ci]" 4
Paul Cacheux (https://github\.com/paulcacheux)
.
.IP "\[ci]" 4
Nic Waller (https://github\.com/sf\-nwaller)
.
.IP "\[ci]" 4
iofq (https://github\.com/iofq)
.
.IP "\[ci]" 4
Noa Resare (https://github\.com/nresare)
.
.IP "\[ci]" 4
Ramon N\.Rodriguez (https://github\.com/runitonmetal)
.
.IP "\[ci]" 4
Golf Hu (https://github\.com/hudeng\-go)
.
.IP "\[ci]" 4
Cookie Fei (https://github\.com/wuhuang26)
.
.IP "\[ci]" 4
Christoph Fiehe (https://github\.com/cfiehe)
.
.IP "" 0

